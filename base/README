线程池创建及处理流程

MThreadPool::start()
Thread::start()
pthread_create()->startThread()->ThreadData::runInThread()->func_();


线程池MThreadPool通过start(int numThreads)函数创建内部实际的线程Thread，所有的线程执行的函数为
void MThreadPool::runInThread(){
    try
    {
        // 执行 线程初始化回调函数
        if (threadInitCallback_){
            threadInitCallback_();
        }
        while (running_){
            // std::funtional<void()>
            Task task(take());//从线程池的任务队列中取出一个任务
            if (task){
                task();
            }
        }
    }catch (const std::exception& ex){
        fprintf(stderr, "exception caught in ThreadPool %s\n", name_.c_str());
        fprintf(stderr, "reason: %s\n", ex.what());
        abort();
    }catch (...){
        fprintf(stderr, "unknown exception caught in ThreadPool %s\n", name_.c_str());
        throw; // rethrow
    }
}

Thread将所有代入的参数封装成ThreadData作为cookie传入pthread_create()函数中，该函数执行startThread()。
在该函数中强制转换获得ThreadData，并执行ThreadData::runInThread()，在该函数中执行传入的任务并时刻记录CurrentThread::t_threadName，将其设置为当前的线程状态。